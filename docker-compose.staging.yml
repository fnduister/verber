services:
  # PostgreSQL Database (Staging)
  postgres-staging:
    image: postgres:15-alpine
    container_name: verber-postgres-staging
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: verber_db_staging
      POSTGRES_INITDB_ARGS: "--auth-host=md5"
    ports:
      - "5433:5432"  # Different port to avoid conflicts
    volumes:
      - postgres_staging_data:/var/lib/postgresql/data
      - ./backend/scripts/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d verber_db_staging"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - verber-staging-network

  # Redis Cache (Staging)
  redis-staging:
    image: redis:7-alpine
    container_name: verber-redis-staging
    restart: unless-stopped
    ports:
      - "6380:6379"  # Different port
    volumes:
      - redis_staging_data:/data
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - verber-staging-network

  # Go Backend API (Staging)
  backend-staging:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: development
    container_name: verber-backend-staging
    restart: unless-stopped
    ports:
      - "8081:8080"  # Different port
    environment:
      - DATABASE_URL=postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres-staging:5432/verber_db_staging?sslmode=disable
      - REDIS_URL=redis://redis-staging:6379
      - JWT_SECRET=${JWT_SECRET}
      - FRONTEND_URL=${FRONTEND_URL}
      - ENVIRONMENT=staging
      - PORT=8080
    volumes:
      - ./backend:/app
      - go_modules_staging:/go/pkg/mod
    depends_on:
      postgres-staging:
        condition: service_healthy
      redis-staging:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - verber-staging-network

  # React Frontend (Staging)
  frontend-staging:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: development
    container_name: verber-frontend-staging
    restart: unless-stopped
    ports:
      - "3001:3000"  # Different port
    environment:
      - REACT_APP_API_URL=${REACT_APP_API_URL}
      - REACT_APP_WS_URL=${REACT_APP_WS_URL}
      - REACT_APP_ENVIRONMENT=${REACT_APP_ENVIRONMENT}
      - REACT_APP_STAGING=${REACT_APP_STAGING}
      - REACT_APP_VERSION=${REACT_APP_VERSION}
      - CHOKIDAR_USEPOLLING=true
      - FAST_REFRESH=true
    volumes:
      - ./frontend:/app
      - /app/node_modules
    depends_on:
      - backend-staging
    stdin_open: true
    tty: true
    networks:
      - verber-staging-network

volumes:
  postgres_staging_data:
  redis_staging_data:
  go_modules_staging:

networks:
  verber-staging-network:
    driver: bridge