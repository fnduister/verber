name: üîÑ Emergency Rollback

on:
  workflow_dispatch:
    inputs:
      backup_date:
        description: 'Backup date to restore (YYYYMMDD-HHMMSS format, leave empty for latest)'
        required: false
        type: string
      reason:
        description: 'Reason for rollback'
        required: true
        type: string

jobs:
  rollback:
    name: Rollback Deployment
    runs-on: ubuntu-latest
    environment: production  # Require approval
    
    steps:
    - name: üì¢ Notify Rollback Start
      if: secrets.DISCORD_WEBHOOK
      uses: sarisia/actions-status-discord@v1
      with:
        webhook: ${{ secrets.DISCORD_WEBHOOK }}
        title: "üîÑ Emergency Rollback Started"
        description: |
          **Reason:** ${{ github.event.inputs.reason }}
          **Initiated by:** ${{ github.actor }}
          **Backup:** ${{ github.event.inputs.backup_date || 'Latest available' }}
        color: 0xffa500  # Orange
    
    - name: üîÑ Execute Rollback
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USER }}
        key: ${{ secrets.SERVER_SSH_KEY }}
        port: ${{ secrets.SERVER_PORT || '22' }}
        script: |
          set -e
          
          cd /opt/verber
          
          echo "üîÑ Starting emergency rollback..."
          echo "Reason: ${{ github.event.inputs.reason }}"
          
          # Stop current services
          echo "Stopping current services..."
          docker-compose -f docker-compose.prod.yml down
          
          # Restore database backup
          backup_file=""
          if [ -n "${{ github.event.inputs.backup_date }}" ]; then
            backup_file="/opt/verber-backups/backup-${{ github.event.inputs.backup_date }}.sql"
          else
            backup_file=$(ls -t /opt/verber-backups/backup-*.sql | head -n1)
          fi
          
          if [ -f "$backup_file" ]; then
            echo "Restoring database from: $backup_file"
            ./manage.sh restore "$backup_file"
          else
            echo "‚ùå Backup file not found: $backup_file"
            exit 1
          fi
          
          # Reset to previous commit (if git history available)
          if git log --oneline -n 2 | grep -q "HEAD~1"; then
            echo "Reverting to previous commit..."
            git reset --hard HEAD~1
          fi
          
          # Restore previous Docker images (use previous tags)
          echo "Starting services with restored configuration..."
          docker-compose -f docker-compose.prod.yml up -d
          
          # Wait for services
          echo "Waiting for services to start..."
          sleep 45
          
          # Health check
          echo "Performing health check..."
          if curl -f -s http://localhost/api/health >/dev/null; then
            echo "‚úÖ Rollback completed successfully"
          else
            echo "‚ùå Rollback health check failed"
            exit 1
          fi
    
    - name: üì¢ Notify Rollback Success
      if: success() && secrets.DISCORD_WEBHOOK
      uses: sarisia/actions-status-discord@v1
      with:
        webhook: ${{ secrets.DISCORD_WEBHOOK }}
        title: "‚úÖ Emergency Rollback Completed"
        description: |
          **Status:** Success
          **Reason:** ${{ github.event.inputs.reason }}
          **Executed by:** ${{ github.actor }}
          **Backup Used:** ${{ github.event.inputs.backup_date || 'Latest available' }}
        color: 0x00ff00  # Green
    
    - name: üì¢ Notify Rollback Failure
      if: failure() && secrets.DISCORD_WEBHOOK
      uses: sarisia/actions-status-discord@v1
      with:
        webhook: ${{ secrets.DISCORD_WEBHOOK }}
        title: "‚ùå Emergency Rollback Failed"
        description: |
          **Status:** Failed
          **Reason:** ${{ github.event.inputs.reason }}
          **Executed by:** ${{ github.actor }}
          
          Manual intervention required immediately!
        color: 0xff0000  # Red