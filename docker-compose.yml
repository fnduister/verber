services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: verber-postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: verber_user
      POSTGRES_PASSWORD: verber_password
      POSTGRES_DB: verber_db
      POSTGRES_INITDB_ARGS: "--auth-host=md5"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/scripts/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U verber_user -d verber_db"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - verber-network

  # Adminer - Lightweight database management tool
  adminer:
    image: adminer:latest
    container_name: verber-adminer
    restart: unless-stopped
    ports:
      - "8082:8080"
    depends_on:
      - postgres
    networks:
      - verber-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: verber-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - verber-network

  # Go Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: development
    container_name: verber-backend
    restart: unless-stopped
    ports:
      - "8080:8080"
    environment:
      - DATABASE_URL=postgres://verber_user:verber_password@postgres:5432/verber_db?sslmode=disable
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=your-super-secret-jwt-key-change-this-in-production
      - FRONTEND_URL=http://localhost:3000
      - ENVIRONMENT=development
      - PORT=8080
    volumes:
      - ./backend:/app
      - go_modules:/go/pkg/mod
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - verber-network

  # React Frontend (Development)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: development
    container_name: verber-frontend
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - REACT_APP_API_URL=http://localhost:8080/api
      - REACT_APP_WS_URL=ws://localhost:8080
      - REACT_APP_ENVIRONMENT=development
      - CHOKIDAR_USEPOLLING=true
    volumes:
      - ./frontend:/app
      - /app/node_modules
    depends_on:
      - backend
    stdin_open: true
    tty: true
    networks:
      - verber-network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  go_modules:
    driver: local
  pgadmin_data:
    driver: local

networks:
  verber-network:
    driver: bridge
